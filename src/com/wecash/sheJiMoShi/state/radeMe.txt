状态模式定义:
当一个对象内在状态改变时允许其改变行为，这个对象看起来像改变了其类。

使用场景:
行为随状态的改变而改变。
如果需要使用大量的条件、分支判断。

角色介绍:
State抽象状态角色
接口或抽象类，负责对象状态定义，并且封装环境角色以实现状态切换。

ConcreteState具体状态角色
具体状态主要有两个职责：一是处理本状态下的事情，二是从本状态如何过渡到其他状态。

Context环境角色
定义客户端需要的接口，并且负责具体状态的切换。

三、总结分析
①定义了一个LinkState抽象类，声明了一个Context变量，这个是串联各个状态的封装类。封装的目的很明显，就是环节状态对象内部状态的变化不被调用类知晓，符合迪米特法则。

②Context环境角色具有两个不成文的约束：一是有几个状态对象就声明几个静态常量；二是具有状态抽象角色定义的所有行为，具体执行使用委托的方式。

③每个具体状态角色所要做的事情就是处理本状态下所对应的动作，不属于本状态处理的行为，就会切换状态并把该行为委托给负责该行为的状态。

④各个状态可以相互切换。

状态模式的优点
体现了开闭原则和单一职责原则，每个状态都是一个子类，你要增加状态就要增加子类，你要修改状态，你只修改一个子类就可以了。
符合迪米特法则。
封装性非常好
结构清晰，避免了过多的switch...case或者if...else语句的使用，避免了程序的复杂性，提高可维护性。
